#include <Wire.h>
#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <LiquidCrystal_I2C.h>
#include <chrono>

// RFID Pin Configuration
#define RST_PIN  2
#define SS_PIN   5

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
MFRC522::StatusCode status;

// WiFi Credentials
#define WIFI_SSID "Anand citylink"
#define WIFI_PASSWORD "anshul@30"

// Google Sheets Script URL
const String sheet_url = "https://script.google.com/macros/s/AKfycbzVD3h-7-GRGXO4GS-XsbVFLofkxUA9Yw-KnYlcqYZYNC7lRa0_g1pow2_HS3XRYysGKA/exec";

// LCD I2C Address
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Relay Pin (active LOW)
#define RELAY_PIN 27
auto start = std::chrono::steady_clock::now();
// RFID data
int blockNum = 2;
byte bufferLen = 18;
byte readBlockData[18];
String card_holder_name;

// Registered users
const String registeredUsers[] = {"Alice", "Bob", "Anshul"};
const int numUsers = sizeof(registeredUsers) / sizeof(registeredUsers[0]);

// Pump control
bool pumpOn = false;
unsigned long pumpStartTime = 0;
const unsigned long pumpDuration = 3000;  // 3 seconds

void setup() {
  Serial.begin(115200);
  Wire.begin();

  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi...");
  lcd.setCursor(0, 1);
  lcd.print("Connecting WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  lcd.clear();
  lcd.print("WiFi Connected!");
  delay(2000);
  lcd.clear();

  SPI.begin();
  mfrc522.PCD_Init();

  Serial.println("RFID ready.");
  lcd.setCursor(0, 0);
  lcd.print("RFID Ready...");

  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);  // Relay OFF (active LOW)
}

void loop() {
  if (!pumpOn) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Scan your Card");

    if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) return;

    Serial.println("Reading RFID...");
    ReadDataFromBlock(blockNum, readBlockData);
    card_holder_name = String((char*)readBlockData);
    card_holder_name.trim();

    Serial.println("Detected: " + card_holder_name);

    bool isRegistered = false;
    for (int i = 0; i < numUsers; i++) {
      if (card_holder_name == registeredUsers[i]) {
        isRegistered = true;
        break;
      }
    }

    if (isRegistered) {
      Serial.println("Access Granted!");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Welcome " + card_holder_name);

      if (WiFi.status() == WL_CONNECTED) {
        HTTPClient https;
        String final_url = sheet_url + "?name=" + card_holder_name;
        final_url.trim();

        Serial.println("Sending data: " + final_url);
        https.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);

        if (https.begin(final_url)) {
          int httpCode = https.GET();
          Serial.printf("HTTP Response: %d\n", httpCode);
          https.end();
        } else {
          Serial.println("HTTP connection failed.");
        }
      }

      lcd.setCursor(0, 1);
      lcd.print("Pump ON");
      digitalWrite(RELAY_PIN, LOW);     // Turn ON pump
      pumpOn = true;
      pumpStartTime = millis();
      auto start = std::chrono::steady_clock::now();
         // Start timing
    } else {
      Serial.println("Access Denied!");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Access Denied!");
      delay(2000);
    }
  }

  if(pumpOn) {
        // Record end time
    auto end = std::chrono::steady_clock::now();

    // Calculate duration
    auto duration = std::chrono::duration_cast<std::chrono::seconds>(end - start);
    if (duration.count() > 8) {
      digitalWrite(RELAY_PIN, HIGH);    // Turn OFF pump
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(duration.count());
      pumpOn = false;
      delay(2000);
    }
  } 

  // // else {
  //   // Turn OFF pump after duration
  //   if ((millis() - pumpStartTime) >= pumpDuration) {
  //     digitalWrite(RELAY_PIN, HIGH);    // Turn OFF pump
  //     lcd.clear();
  //     lcd.setCursor(0, 0);
  //     lcd.print("Pump OFF");
  //     pumpOn = false;
  //     delay(2000);
  //   }
  // }
}

// Read RFID block
void ReadDataFromBlock(int blockNum, byte readBlockData[]) {
  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Auth failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }

  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Read failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }

  Serial.println("RFID Read Success!");
}
